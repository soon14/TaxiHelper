package com.example.taxihelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.taxihelper.mvp.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property AccountBalance = new Property(1, String.class, "accountBalance", false, "ACCOUNT_BALANCE");
        public final static Property CompanyAccountBalance = new Property(2, String.class, "companyAccountBalance", false, "COMPANY_ACCOUNT_BALANCE");
        public final static Property CompanyPayType = new Property(3, int.class, "companyPayType", false, "COMPANY_PAY_TYPE");
        public final static Property CompanyQuotaType = new Property(4, int.class, "companyQuotaType", false, "COMPANY_QUOTA_TYPE");
        public final static Property CompanyRemainAmount = new Property(5, String.class, "companyRemainAmount", false, "COMPANY_REMAIN_AMOUNT");
        public final static Property PayType = new Property(6, int.class, "payType", false, "PAY_TYPE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Id = new Property(8, String.class, "id", false, "ID");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Picture = new Property(11, String.class, "picture", false, "PICTURE");
        public final static Property Sex = new Property(12, int.class, "sex", false, "SEX");
        public final static Property UninvoiceAmount = new Property(13, String.class, "uninvoiceAmount", false, "UNINVOICE_AMOUNT");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ACCOUNT_BALANCE\" TEXT UNIQUE ," + // 1: accountBalance
                "\"COMPANY_ACCOUNT_BALANCE\" TEXT UNIQUE ," + // 2: companyAccountBalance
                "\"COMPANY_PAY_TYPE\" INTEGER NOT NULL UNIQUE ," + // 3: companyPayType
                "\"COMPANY_QUOTA_TYPE\" INTEGER NOT NULL UNIQUE ," + // 4: companyQuotaType
                "\"COMPANY_REMAIN_AMOUNT\" TEXT UNIQUE ," + // 5: companyRemainAmount
                "\"PAY_TYPE\" INTEGER NOT NULL UNIQUE ," + // 6: payType
                "\"EMAIL\" TEXT UNIQUE ," + // 7: email
                "\"ID\" TEXT UNIQUE ," + // 8: id
                "\"NAME\" TEXT UNIQUE ," + // 9: name
                "\"PHONE\" TEXT UNIQUE ," + // 10: phone
                "\"PICTURE\" TEXT UNIQUE ," + // 11: picture
                "\"SEX\" INTEGER NOT NULL UNIQUE ," + // 12: sex
                "\"UNINVOICE_AMOUNT\" TEXT UNIQUE );"); // 13: uninvoiceAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String accountBalance = entity.getAccountBalance();
        if (accountBalance != null) {
            stmt.bindString(2, accountBalance);
        }
 
        String companyAccountBalance = entity.getCompanyAccountBalance();
        if (companyAccountBalance != null) {
            stmt.bindString(3, companyAccountBalance);
        }
        stmt.bindLong(4, entity.getCompanyPayType());
        stmt.bindLong(5, entity.getCompanyQuotaType());
 
        String companyRemainAmount = entity.getCompanyRemainAmount();
        if (companyRemainAmount != null) {
            stmt.bindString(6, companyRemainAmount);
        }
        stmt.bindLong(7, entity.getPayType());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(12, picture);
        }
        stmt.bindLong(13, entity.getSex());
 
        String uninvoiceAmount = entity.getUninvoiceAmount();
        if (uninvoiceAmount != null) {
            stmt.bindString(14, uninvoiceAmount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String accountBalance = entity.getAccountBalance();
        if (accountBalance != null) {
            stmt.bindString(2, accountBalance);
        }
 
        String companyAccountBalance = entity.getCompanyAccountBalance();
        if (companyAccountBalance != null) {
            stmt.bindString(3, companyAccountBalance);
        }
        stmt.bindLong(4, entity.getCompanyPayType());
        stmt.bindLong(5, entity.getCompanyQuotaType());
 
        String companyRemainAmount = entity.getCompanyRemainAmount();
        if (companyRemainAmount != null) {
            stmt.bindString(6, companyRemainAmount);
        }
        stmt.bindLong(7, entity.getPayType());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(12, picture);
        }
        stmt.bindLong(13, entity.getSex());
 
        String uninvoiceAmount = entity.getUninvoiceAmount();
        if (uninvoiceAmount != null) {
            stmt.bindString(14, uninvoiceAmount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountBalance
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // companyAccountBalance
            cursor.getInt(offset + 3), // companyPayType
            cursor.getInt(offset + 4), // companyQuotaType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // companyRemainAmount
            cursor.getInt(offset + 6), // payType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // picture
            cursor.getInt(offset + 12), // sex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // uninvoiceAmount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountBalance(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyAccountBalance(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyPayType(cursor.getInt(offset + 3));
        entity.setCompanyQuotaType(cursor.getInt(offset + 4));
        entity.setCompanyRemainAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayType(cursor.getInt(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPicture(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.getInt(offset + 12));
        entity.setUninvoiceAmount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
